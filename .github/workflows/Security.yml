name: 🔒 Hybrid Security Pipeline

on:
  push:
    branches: [ "main", "master", "develop" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main", "master" ]
  schedule:
    - cron: '0 2 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  issues: write
  id-token: write

env:
  SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
  STAGING_URL: ${{ vars.STAGING_URL || 'https://testphp.vulnweb.com' }}
  DEV_URL: ${{ vars.DEV_URL || 'https://juice-shop.herokuapp.com' }}
  PROD_URL: ${{ vars.PRODUCTION_URL || 'https://demo.testfire.net' }}
  MAX_SCAN_TIME: '1800'
  CRITICAL_THRESHOLD: '0'
  HIGH_THRESHOLD: '5'
  MEDIUM_THRESHOLD: '20'
  REPORT_RETENTION_DAYS: '180'

jobs:
  semgrep_static_analysis:
    name: 📝 Semgrep Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Semgrep (Cloud Upload)
        uses: returntocorp/semgrep-action@v1
        with:
             publishToken: ${{ env.SEMGREP_APP_TOKEN }}
             publishDeployment: true
             sendGitMetadata: true
             generateSarif: "1"

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep-static
      - name: Archive Semgrep JSON Results
        run: |
          mkdir -p reports/semgrep
          if [ -f semgrep.json ]; then
            cp semgrep.json reports/semgrep/
          fi
      - name: Upload Semgrep reports artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: reports/semgrep/
          retention-days: 30

  dast_nuclei_scan:
    name: 🌐 Nuclei DAST Scan
    runs-on: ubuntu-latest
    needs: semgrep_static_analysis
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Nuclei
      run: |
        go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
        echo "$HOME/go/bin" >> $GITHUB_PATH

    - name: Define Target and Validate
      id: target
      run: |
        TARGET="${{ env.STAGING_URL }}"
        if [[ "$TARGET" == *"example.com"* ]] || [[ -z "$TARGET" ]]; then
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "target=$TARGET" >> $GITHUB_OUTPUT
        fi

    - name: Run Nuclei Scan
      if: steps.target.outputs.skip != 'true'
      run: |
        mkdir -p reports/nuclei
        nuclei -target "${{ steps.target.outputs.target }}" \
          -severity critical,high,medium,low,info \
          -rate-limit 10 \
          -timeout 30 \
          -json \
          -output reports/nuclei/nuclei-findings.json \
          -sarif-export reports/nuclei/nuclei-findings.sarif \
          -silent

    - name: Upload SARIF results
      if: steps.target.outputs.skip != 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
          sarif_file: reports/nuclei/nuclei-findings.sarif
          category: nuclei-dast
    - name: Upload Nuclei artifact
      if: steps.target.outputs.skip != 'true'
      uses: actions/upload-artifact@v4
      with:
          name: nuclei-report
          path: reports/nuclei/
          retention-days: 30

  intelligence_reporting:
    name: 📊 Intelligence & Clean Reporting
    runs-on: ubuntu-latest
    needs: [semgrep_static_analysis, dast_nuclei_scan]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: reports
      - name: Summarize Security Results
        run: |
          echo "📊 Generating security report..."

          set -e

          # Default values
          total_critical=0
          total_high=0
          total_medium=0
          total_findings=0

          # Semgrep findings
          if [ -f reports/semgrep/semgrep.json ]; then
            total_critical_semgrep=$(jq '[.results[] | select(.extra.severity == "ERROR" or .extra.severity == "CRITICAL")] | length' reports/semgrep/semgrep.json 2>/dev/null || echo "0")
            total_high_semgrep=$(jq '[.results[] | select(.extra.severity == "WARNING" or .extra.severity == "HIGH")] | length' reports/semgrep/semgrep.json 2>/dev/null || echo "0")
            total_medium_semgrep=$(jq '[.results[] | select(.extra.severity == "MEDIUM")] | length' reports/semgrep/semgrep.json 2>/dev/null || echo "0")
            total_findings_semgrep=$(jq '.results | length' reports/semgrep/semgrep.json 2>/dev/null || echo "0")
          else
            total_critical_semgrep=0
            total_high_semgrep=0
            total_medium_semgrep=0
            total_findings_semgrep=0
          fi

          # Nuclei findings
          if [ -f reports/nuclei/nuclei-findings.json ]; then
            total_critical_nuclei=$(jq '[.[] | select(.info.severity == "critical")] | length' reports/nuclei/nuclei-findings.json 2>/dev/null || echo "0")
            total_high_nuclei=$(jq '[.[] | select(.info.severity == "high")] | length' reports/nuclei/nuclei-findings.json 2>/dev/null || echo "0")
            total_medium_nuclei=$(jq '[.[] | select(.info.severity == "medium")] | length' reports/nuclei/nuclei-findings.json 2>/dev/null || echo "0")
            total_findings_nuclei=$(jq 'length' reports/nuclei/nuclei-findings.json 2>/dev/null || echo "0")
          else
            total_critical_nuclei=0
            total_high_nuclei=0
            total_medium_nuclei=0
            total_findings_nuclei=0
          fi

          # Totals
          total_critical=$((total_critical_semgrep + total_critical_nuclei))
          total_high=$((total_high_semgrep + total_high_nuclei))
          total_medium=$((total_medium_semgrep + total_medium_nuclei))
          total_findings=$((total_findings_semgrep + total_findings_nuclei))

          # Risk assessment
          if [ "$total_critical" -gt 0 ]; then
            risk_level="CRITICAL"
            risk_symbol="🚨"
          elif [ "$total_high" -gt 5 ]; then
            risk_level="HIGH"
            risk_symbol="⚠️"
          elif [ "$total_high" -gt 0 ]; then
            risk_level="MEDIUM"
            risk_symbol="🟡"
          else
            risk_level="LOW"
            risk_symbol="✅"
          fi

          # Compliance scoring
          compliance_deductions=0
          compliance_deductions=$((compliance_deductions + total_critical * 10))
          compliance_deductions=$((compliance_deductions + total_high * 3))
          compliance_score=$((100 - compliance_deductions))
          [ $compliance_score -lt 0 ] && compliance_score=0

          # Create report
          mkdir -p reports/final
          cat > reports/final/security-report.md <<EOF
          # 🔒 Security Pipeline Report

          ## ${risk_symbol} Risk Level: ${risk_level}
          - **Critical Issues:** $total_critical
          - **High Issues:** $total_high
          - **Medium Issues:** $total_medium
          - **Total Findings:** $total_findings
          - **Compliance Score:** $compliance_score%

          ## **Recommended Actions**
          $( [ "$total_critical" -gt 0 ] && echo "- Address all critical issues immediately." || echo "- No critical issues found." )
          $( [ "$total_high" -gt 5 ] && echo "- Prioritize all high and medium severity issues." || echo "- Review all high and medium severity issues within 1 week." )

          ## **Summary**
          - Full Semgrep and Nuclei vulnerability scan on latest commit.
          - SARIF results uploaded to GitHub Security tab for review.
          - Detailed findings available as workflow artifacts.

          **Report generated on:** $(date -u '+%Y-%m-%d %H:%M UTC')
          EOF

      - name: Upload Security Summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: reports/final/security-report.md
          retention-days: 30
