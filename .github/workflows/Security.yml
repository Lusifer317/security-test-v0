name: Security Scan

on:
  push:
    branches: [ "main", "master", "develop" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main", "master" ]
  schedule:
    - cron: '0 2 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  issues: write
  id-token: write

env:
  SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
  STAGING_URL: ${{ vars.STAGING_URL || 'https://juice-shop.herokuapp.com' }}
  DEV_URL: ${{ vars.DEV_URL || 'https://webgoat.cloud' }}
  PROD_URL: ${{ vars.PRODUCTION_URL || 'https://demo.testfire.net' }}
  SEMGREP_VERSION: 1.131.0
  MAX_SCAN_TIME: '1800'
  CRITICAL_THRESHOLD: '0'
  HIGH_THRESHOLD: '5'
  MEDIUM_THRESHOLD: '20'
  REPORT_RETENTION_DAYS: '180'

jobs:

 Trivy_FS_Scan:
  name: Trivy Filesystem Vulnerability Scan
  runs-on: ubuntu-latest

  permissions:
    contents: read
    security-events: write
    actions: read

  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Trivy DB
      uses: actions/cache@v4
      with:
        path: ~/.cache/trivy
        key: trivy-db-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/requirements.txt', '**/go.sum') }}
        restore-keys: trivy-db-${{ runner.os }}-

    - name: Run Trivy Filesystem Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload SARIF to GitHub Security Tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif
        category: trivy-fs

    - name: Archive Trivy results
      run: |
        mkdir -p reports/trivy
        cp trivy-results.sarif reports/trivy/

    - name: Upload Trivy Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: trivy-report
        path: reports/trivy/
        retention-days: 30


 ################################################################################
# FAST SEMGR EP STATIC CODE ANALYSIS
################################################################################

 semgrep_static_analysis:
  name: Semgrep Static Code Analysis
  runs-on: ubuntu-latest

  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Restore Semgrep cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/semgrep
        key: ${{ runner.os }}-semgrep-${{ env.SEMGREP_VERSION }}
        restore-keys: |
          ${{ runner.os }}-semgrep-

    - name: Install Semgrep CLI
      run: pip install semgrep==${{ env.SEMGREP_VERSION }}

    
    - name: Run Semgrep CI
      env:
        SEMGREP_API_TOKEN: ${{ secrets.SEMGREP_API_TOKEN }}
        GITHUB_TOKEN:      ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🔍  Starting Semgrep CI …"

        COMMON_FLAGS="--max-target-bytes 500000 --jobs 2 \
                      --sarif --output semgrep.sarif"

        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "🏁  Weekly schedule → full scan (code + supply-chain)"
          semgrep ci $COMMON_FLAGS
          semgrep ci --json --output semgrep.json
        else
          echo "⚡  Push / PR → fast code-only scan"
          semgrep ci --no-supply-chain $COMMON_FLAGS
          semgrep ci --no-supply-chain --json --output semgrep.json
        fi

    
    - name: Verify Semgrep outputs
      run: |
        [ -s semgrep.sarif ] || \
          echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"semgrep"}},"results":[]}]}'> semgrep.sarif
        [ -s semgrep.json ]  || \
          echo '{"results":[],"errors":[],"paths":{"scanned":[]}}' > semgrep.json

    - name: Upload SARIF to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif
        category: semgrep-static

    - name: Archive Semgrep artifacts
      uses: actions/upload-artifact@v4
      with:
        name: semgrep-report
        path: |
          semgrep.sarif
          semgrep.json
        retention-days: 30



 dast_nuclei_scan:
    name: Nuclei DAST Scan
    runs-on: ubuntu-latest
    needs: semgrep_static_analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Nuclei
        run: |
          go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH
          export PATH="$HOME/go/bin:$PATH"
          nuclei -version
          
      - name: Cache Nuclei templates
        uses: actions/cache@v3
        with:
          path: ~/.config/nuclei/templates
          key: ${{ runner.os }}-nuclei-templates-${{ hashFiles('~/.config/nuclei/templates/**') }}
          restore-keys: |
            ${{ runner.os }}-nuclei-templates-

      - name: Download and Update Nuclei Templates
        run: |
          nuclei -update-templates -silent
          echo " Template update completed"
          
      - name: List Available Template Categories
        run: |
          echo " Available template categories:"
          nuclei -templates-list 2>/dev/null | head -20 || echo "Template listing not available"

      - name: Define Target and Validate
        id: target
        run: |
          TARGET="${{ env.STAGING_URL }}"
          if [[ "$TARGET" == *"example.com"* ]] || [[ -z "$TARGET" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo " Skipping DAST - invalid or placeholder URL: $TARGET"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "target=$TARGET" >> $GITHUB_OUTPUT
            echo " Valid DAST target: $TARGET"
          fi

     # - name: Run Comprehensive Nuclei Security Scan
      #  if: steps.target.outputs.skip != 'true'
       # run: |
        #  mkdir -p reports/nuclei
          
         # echo " Starting comprehensive security scan with targeted templates..."
          
          #nuclei -target "${{ steps.target.outputs.target }}" \
           # -t cves/ \
            #-t vulnerabilities/ \
            #-t exposures/ \
            #-t misconfigurations/ \
            #-t default-logins/ \
            #-t file/ \
            #-t network/ \
            #-t dns/ \
            #-t http/ \
            #-t ssl/ \
            #-t headless/ \
            #-t technologies/ \
            #-t workflows/ \
            #-t cves/2023/ \
            #-t cves/2022/ \
            #-t cves/2021/ \
            #-t vulnerabilities/wordpress/ \
            #-t vulnerabilities/apache/ \
            #-t vulnerabilities/nginx/ \
            #-t vulnerabilities/php/ \
            #-t vulnerabilities/java/ \
            #-t vulnerabilities/dotnet/ \
            #-t vulnerabilities/nodejs/ \
            #-t vulnerabilities/python/ \
            #-t exposures/configs/ \
            #-t exposures/backups/ \
            #-t exposures/logs/ \
            #-t exposures/apis/ \
            #-t misconfigurations/apache/ \
            #-t misconfigurations/nginx/ \
            #-t misconfigurations/aws/ \
            #-t misconfigurations/azure/ \
            #-t misconfigurations/gcp/ \
            #-t misconfigurations/kubernetes/ \
            #-t misconfigurations/docker/ \
            #-t default-logins/apache/ \
            #-t default-logins/ftp/ \
            #-t default-logins/ssh/ \
            #-t default-logins/databases/ \
            #-t http/cves/ \
            #-t http/vulnerabilities/ \
            #-t http/exposures/ \
            #-t http/misconfigulation/ \
            #-t http/takeovers/ \
            #-t http/technologies/ \
            #-t file/logs/ \
            #-t file/configs/ \
            #-t network/cves/ \
            #-t network/vulnerabilities/ \
            #-t ssl/weak-cipher/ \
            #-t ssl/tls-version/ \
            #-t ssl/ssl-dns-names/ \
            #-severity critical,high,medium,low,info \
            #-rate-limit 10 \
            #-timeout 30 \
            #-retries 2 \
            #-max-host-error 5 \
            #-jsonl -output reports/nuclei/nuclei-findings.json \
            #-sarif-export reports/nuclei/nuclei-findings.sarif \
            #-stats \
            #-silent || echo " Nuclei scan finished with warnings"

      - name: Run OWASP Top 10 Focused Scan
        if: steps.target.outputs.skip != 'true'
        run: |
          echo " Running OWASP Top 10 focused scan..."
          
          nuclei -target "${{ steps.target.outputs.target }}" \
            -t http/vulnerabilities/wordpress/ \
            -t http/vulnerabilities/drupal/ \
            -t http/vulnerabilities/joomla/ \
            -t http/cves/2023/ \
            -t http/cves/2022/ \
            -t http/exposures/ \
            -t http/misconfiguration/ \
            -t vulnerabilities/sqli/ \
            -t vulnerabilities/xss/ \
            -t vulnerabilities/xxe/ \
            -t vulnerabilities/ssrf/ \
            -t vulnerabilities/lfi/ \
            -t vulnerabilities/rfi/ \
            -t vulnerabilities/rce/ \
            -t vulnerabilities/auth-bypass/ \
            -t vulnerabilities/injection/ \
            -t default-logins/ \
            -severity critical,high \
            -rate-limit 15 \
            -timeout 45 \
            -retries 3 \
            -jsonl -output reports/nuclei/nuclei-owasp-findings.json \
            -silent || echo " OWASP scan completed with warnings"

      - name: Run Technology-Specific Detection
        if: steps.target.outputs.skip != 'true'
        run: |
          echo " Running technology detection and specific vulnerability checks..."
          
          nuclei -target "${{ steps.target.outputs.target }}" \
            -t technologies/ \
            -t http/technologies/ \
            -t technologies/wordpress-detect.yaml \
            -t technologies/php-detect.yaml \
            -t technologies/apache-detect.yaml \
            -t technologies/nginx-detect.yaml \
            -t technologies/mysql-detect.yaml \
            -t technologies/java-detect.yaml \
            -t technologies/python-detect.yaml \
            -t technologies/nodejs-detect.yaml \
            -t http/miscellaneous/ \
            -t http/fuzzing/ \
            -severity info,low,medium,high,critical \
            -rate-limit 20 \
            -timeout 30 \
            -jsonl -output reports/nuclei/nuclei-tech-findings.json \
            -silent || echo " Technology scan completed with warnings"

      - name: Combine and Process Results
        if: steps.target.outputs.skip != 'true'
        run: |
          echo " Processing and combining scan results..."
          
          # Combine all JSONL results
          if [ -f reports/nuclei/nuclei-findings.json ]; then
            cp reports/nuclei/nuclei-findings.json reports/nuclei/nuclei-combined.json
          fi
          
          if [ -f reports/nuclei/nuclei-owasp-findings.json ]; then
            cat reports/nuclei/nuclei-owasp-findings.json >> reports/nuclei/nuclei-combined.json
          fi
          
          if [ -f reports/nuclei/nuclei-tech-findings.json ]; then
            cat reports/nuclei/nuclei-tech-findings.json >> reports/nuclei/nuclei-combined.json
          fi
          
          # Create final findings file (remove duplicates if any)
          if [ -f reports/nuclei/nuclei-combined.json ]; then
            sort -u reports/nuclei/nuclei-combined.json > reports/nuclei/nuclei-findings.json
          fi
          
          # Generate summary statistics
          if [ -f reports/nuclei/nuclei-findings.json ]; then
            total_findings=$(wc -l < reports/nuclei/nuclei-findings.json)
            critical_findings=$(grep -c '"severity":"critical"' reports/nuclei/nuclei-findings.json || echo 0)
            high_findings=$(grep -c '"severity":"high"' reports/nuclei/nuclei-findings.json || echo 0)
            
            echo "   Nuclei Scan Summary:"
            echo "   Total Findings: $total_findings"
            echo "   Critical: $critical_findings"
            echo "   High: $high_findings"
          fi

      - name: Validate and Fix SARIF if Needed
        if: steps.target.outputs.skip != 'true'
        run: |
          if [ ! -s reports/nuclei/nuclei-findings.sarif ]; then
            echo " Creating fallback SARIF"
            mkdir -p reports/nuclei
            echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"nuclei"}},"results":[]}]}'> reports/nuclei/nuclei-findings.sarif
          fi

      - name: Upload SARIF to GitHub Security Tab
        if: steps.target.outputs.skip != 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/nuclei/nuclei-findings.sarif
          category: nuclei-dast

      - name: Upload Nuclei Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuclei-report
          path: reports/nuclei/
          retention-days: 30

 intelligence_reporting:
  name: 📊 Intelligence & Clean Reporting
  runs-on: ubuntu-latest
  needs: [semgrep_static_analysis, dast_nuclei_scan, Trivy_FS_Scan]
  if: always()
  steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: reports
      continue-on-error: true

    - name: Normalize Nuclei JSONL output
      run: |
        if [ -f reports/nuclei-report/nuclei-findings.json ]; then
          echo "🔄 Converting Nuclei JSONL to JSON array..."
          jq -s '.' reports/nuclei-report/nuclei-findings.json > reports/nuclei-report/nuclei-findings-array.json
        else
          echo "[]" > reports/nuclei-report/nuclei-findings-array.json
        fi

    - name: Summarize Security Results
      run: |
        echo "📊 Generating summary..."

        total_critical=0; total_high=0; total_medium=0; total_findings=0

        # SEMGREP
        if [ -f reports/semgrep-report/semgrep.json ]; then
          total_critical_semgrep=$(jq '[.results[] | select(.extra.severity=="ERROR" or .extra.severity=="CRITICAL")] | length' reports/semgrep-report/semgrep.json)
          total_high_semgrep=$(jq '[.results[] | select(.extra.severity=="WARNING" or .extra.severity=="HIGH")] | length' reports/semgrep-report/semgrep.json)
          total_medium_semgrep=$(jq '[.results[] | select(.extra.severity=="MEDIUM")] | length' reports/semgrep-report/semgrep.json)
          total_findings_semgrep=$(jq '.results | length' reports/semgrep-report/semgrep.json)
        else
          total_critical_semgrep=0; total_high_semgrep=0; total_medium_semgrep=0; total_findings_semgrep=0
        fi

        # NUCLEI
        if [ -f reports/nuclei-report/nuclei-findings-array.json ]; then
          total_critical_nuclei=$(jq '[.[] | select(.info.severity=="critical")] | length' reports/nuclei-report/nuclei-findings-array.json)
          total_high_nuclei=$(jq '[.[] | select(.info.severity=="high")] | length' reports/nuclei-report/nuclei-findings-array.json)
          total_medium_nuclei=$(jq '[.[] | select(.info.severity=="medium")] | length' reports/nuclei-report/nuclei-findings-array.json)
          total_findings_nuclei=$(jq 'length' reports/nuclei-report/nuclei-findings-array.json)
        else
          total_critical_nuclei=0; total_high_nuclei=0; total_medium_nuclei=0; total_findings_nuclei=0
        fi

        # TRIVY
        if [ -f reports/trivy/trivy-results.sarif ]; then
          total_critical_trivy=$(jq '[.runs[].results[] | select(.level=="error")] | length' reports/trivy/trivy-results.sarif)
          total_high_trivy=$(jq '[.runs[].results[] | select(.level=="warning")] | length' reports/trivy/trivy-results.sarif)
          total_findings_trivy=$(jq '.runs[].results | length' reports/trivy/trivy-results.sarif)
        else
          total_critical_trivy=0; total_high_trivy=0; total_findings_trivy=0
        fi

        total_critical=$((total_critical_semgrep + total_critical_nuclei + total_critical_trivy))
        total_high=$((total_high_semgrep + total_high_nuclei + total_high_trivy))
        total_medium=$((total_medium_semgrep + total_medium_nuclei))
        total_findings=$((total_findings_semgrep + total_findings_nuclei + total_findings_trivy))

        if [ "$total_critical" -gt 0 ]; then
          risk_level="CRITICAL"; risk_symbol="🚨"
        elif [ "$total_high" -gt 5 ]; then
          risk_level="HIGH"; risk_symbol="⚠️"
        elif [ "$total_high" -gt 0 ]; then
          risk_level="MEDIUM"; risk_symbol="🟡"
        else
          risk_level="LOW"; risk_symbol="✅"
        fi

        compliance_score=$((100 - total_critical * 10 - total_high * 3))
        [ $compliance_score -lt 0 ] && compliance_score=0

        mkdir -p reports/final

        cat > reports/final/security-report.md << 'REPORT_EOF'
        # 🔒 Security Pipeline Report

        ## RISK_SYMBOL Risk Level: RISK_LEVEL
        - **Critical Issues:** TOTAL_CRITICAL
        - **High Issues:** TOTAL_HIGH
        - **Medium Issues:** TOTAL_MEDIUM
        - **Total Findings:** TOTAL_FINDINGS
        - **Compliance Score:** COMPLIANCE_SCORE%

        ## 📊 Breakdown by Tool
        - **Semgrep (SAST):** SEMGREP_FINDINGS findings (SEMGREP_CRITICAL critical, SEMGREP_HIGH high)
        - **Nuclei (DAST):** NUCLEI_FINDINGS findings (NUCLEI_CRITICAL critical, NUCLEI_HIGH high)
        - **Trivy (FS Scan):** TRIVY_FINDINGS findings (TRIVY_CRITICAL critical, TRIVY_HIGH high)

        ## 🎯 Recommended Actions
        RECOMMENDED_ACTIONS

        **Report generated:** REPORT_DATE
        REPORT_EOF

        # Replace placeholders
        sed -i "s/RISK_SYMBOL/$risk_symbol/g" reports/final/security-report.md
        sed -i "s/RISK_LEVEL/$risk_level/g" reports/final/security-report.md
        sed -i "s/TOTAL_CRITICAL/$total_critical/g" reports/final/security-report.md
        sed -i "s/TOTAL_HIGH/$total_high/g" reports/final/security-report.md
        sed -i "s/TOTAL_MEDIUM/$total_medium/g" reports/final/security-report.md
        sed -i "s/TOTAL_FINDINGS/$total_findings/g" reports/final/security-report.md
        sed -i "s/COMPLIANCE_SCORE/$compliance_score/g" reports/final/security-report.md
        sed -i "s/SEMGREP_FINDINGS/$total_findings_semgrep/g" reports/final/security-report.md
        sed -i "s/SEMGREP_CRITICAL/$total_critical_semgrep/g" reports/final/security-report.md
        sed -i "s/SEMGREP_HIGH/$total_high_semgrep/g" reports/final/security-report.md
        sed -i "s/NUCLEI_FINDINGS/$total_findings_nuclei/g" reports/final/security-report.md
        sed -i "s/NUCLEI_CRITICAL/$total_critical_nuclei/g" reports/final/security-report.md
        sed -i "s/NUCLEI_HIGH/$total_high_nuclei/g" reports/final/security-report.md
        sed -i "s/TRIVY_FINDINGS/$total_findings_trivy/g" reports/final/security-report.md
        sed -i "s/TRIVY_CRITICAL/$total_critical_trivy/g" reports/final/security-report.md
        sed -i "s/TRIVY_HIGH/$total_high_trivy/g" reports/final/security-report.md
        sed -i "s/REPORT_DATE/$(date -u)/g" reports/final/security-report.md

        if [ "$total_critical" -gt 0 ]; then
          recommendations="- 🚨 Address critical issues immediately and audit SDLC process."
        elif [ "$total_high" -gt 5 ]; then
          recommendations="- ⚠️ Review high findings within 7 days and improve testing coverage."
        elif [ "$total_high" -gt 0 ]; then
          recommendations="- 📋 Address high findings in upcoming sprint."
        else
          recommendations="- ✅ Maintain good security hygiene."
        fi

        sed -i "s|RECOMMENDED_ACTIONS|$recommendations|g" reports/final/security-report.md

        echo "✅ Security summary compiled"

    - name: Create Step Summary
      run: |
        if [ -f reports/final/security-report.md ]; then
          echo "## 🔒 Security Pipeline Results" >> $GITHUB_STEP_SUMMARY
          cat reports/final/security-report.md >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ No security summary generated" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload Security Summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: reports/final/
        retention-days: 30

    - name: Post PR Comment with Security Summary
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        path: reports/final/security-report.md
        header: security-report

