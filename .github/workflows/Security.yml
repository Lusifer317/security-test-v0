name: 🔒 Hybrid Security Pipeline

on:
  push:
    branches: [ "main", "master", "develop" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main", "master" ]
  schedule:
    - cron: '0 2 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  issues: write
  id-token: write

env:
  SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
  STAGING_URL: ${{ vars.STAGING_URL || 'https://testphp.vulnweb.com' }}
  DEV_URL: ${{ vars.DEV_URL || 'https://juice-shop.herokuapp.com' }}
  PROD_URL: ${{ vars.PRODUCTION_URL || 'https://demo.testfire.net' }}
  MAX_SCAN_TIME: '1800'
  CRITICAL_THRESHOLD: '0'
  HIGH_THRESHOLD: '5'
  MEDIUM_THRESHOLD: '20'
  REPORT_RETENTION_DAYS: '180'

jobs:

  semgrep_static_analysis:
    name: 📝 Semgrep Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Semgrep CLI
        run: pip install semgrep

      - name: Run Semgrep scan and generate SARIF + JSON
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Running Semgrep scan..."
          
          # Generate JSON output for intelligence reporting
          semgrep --config=auto --json --quiet > semgrep.json || echo "⚠️ Semgrep JSON generation failed"
          
          # Generate SARIF output for GitHub Security tab
          semgrep --config=auto --sarif --quiet > semgrep.sarif || echo "⚠️ Semgrep SARIF generation failed"
          
          # Upload to Semgrep Cloud and enable PR comments (if token is available)
          if [ -n "$SEMGREP_APP_TOKEN" ]; then
            echo "📤 Uploading results to Semgrep Cloud..."
            semgrep ci --config=auto || echo "⚠️ Semgrep Cloud upload failed"
          else
            echo "⚠️ No SEMGREP_APP_TOKEN provided, skipping cloud upload and PR comments"
          fi

      - name: Validate outputs before upload
        run: |
          echo "🔍 Validating generated files..."
          
          # Check SARIF file
          if [ ! -s semgrep.sarif ]; then
            echo "❌ SARIF file does not exist or is empty"
            # Create empty SARIF if none exists to prevent upload failure
            echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"semgrep","version":"unknown"}},"results":[]}]}' > semgrep.sarif
          else
            if ! jq . semgrep.sarif > /dev/null 2>&1; then
              echo "❌ SARIF file is not valid JSON"
              cat semgrep.sarif
              # Create empty SARIF to prevent upload failure
              echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"semgrep","version":"unknown"}},"results":[]}]}' > semgrep.sarif
            else
              echo "✅ SARIF is valid"
            fi
          fi
          
          # Check JSON file
          if [ ! -s semgrep.json ]; then
            echo "❌ JSON file does not exist or is empty"
            # Create empty JSON structure
            echo '{"results":[],"errors":[],"paths":{"scanned":[]}}' > semgrep.json
          else
            if ! jq . semgrep.json > /dev/null 2>&1; then
              echo "❌ JSON file is not valid"
              # Create empty JSON structure
              echo '{"results":[],"errors":[],"paths":{"scanned":[]}}' > semgrep.json
            else
              echo "✅ JSON is valid"
            fi
          fi

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep-static

      - name: Archive SARIF + JSON Results
        run: |
          mkdir -p reports/semgrep
          cp semgrep.sarif reports/semgrep/ 2>/dev/null || echo "No SARIF to copy"
          cp semgrep.json reports/semgrep/ 2>/dev/null || echo "No JSON to copy"

      - name: Upload Semgrep Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: reports/semgrep/
          retention-days: 30

  dast_nuclei_scan:
    name: 🌐 Nuclei DAST Scan
    runs-on: ubuntu-latest
    needs: semgrep_static_analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Nuclei
        run: |
          go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Update Nuclei Templates
        run: nuclei -update-templates -silent

      - name: Define Target and Validate
        id: target
        run: |
          TARGET="${{ env.STAGING_URL }}"
          if [[ "$TARGET" == *"example.com"* ]] || [[ -z "$TARGET" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "⚠️ Skipping DAST - invalid or placeholder URL: $TARGET"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "target=$TARGET" >> $GITHUB_OUTPUT
            echo "✅ DAST target validated: $TARGET"
          fi

      - name: Run Nuclei Scan
        if: steps.target.outputs.skip != 'true'
        run: |
          mkdir -p reports/nuclei
          nuclei -target "${{ steps.target.outputs.target }}" \
            -tags cve,vuln,misconfig,exposure \
            -severity critical,high,medium,low,info \
            -rate-limit 10 \
            -timeout 30 \
            -retries 2 \
            -json \
            -output reports/nuclei/nuclei-findings.json \
            -sarif-export reports/nuclei/nuclei-findings.sarif \
            -silent || echo "⚠️ Nuclei scan completed with warnings"

      - name: Validate Nuclei SARIF
        if: steps.target.outputs.skip != 'true'
        run: |
          if [ -f reports/nuclei/nuclei-findings.sarif ] && [ -s reports/nuclei/nuclei-findings.sarif ]; then
            if jq . reports/nuclei/nuclei-findings.sarif > /dev/null 2>&1; then
              echo "✅ Nuclei SARIF is valid"
            else
              echo "❌ Nuclei SARIF is invalid JSON, skipping upload"
              rm -f reports/nuclei/nuclei-findings.sarif
            fi
          else
            echo "⚠️ No Nuclei SARIF file generated or file is empty"
          fi

      - name: Upload SARIF results
        if: steps.target.outputs.skip != 'true' && hashFiles('reports/nuclei/nuclei-findings.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/nuclei/nuclei-findings.sarif
          category: nuclei-dast

      - name: Upload Nuclei artifact
        if: steps.target.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: nuclei-report
          path: reports/nuclei/
          retention-days: 30

  intelligence_reporting:
    name: 📊 Intelligence & Clean Reporting
    runs-on: ubuntu-latest
    needs: [semgrep_static_analysis, dast_nuclei_scan]
    if: always()
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: reports
        continue-on-error: true

      - name: Summarize Security Results
        run: |
          echo "📊 Generating security report..."

          total_critical=0
          total_high=0
          total_medium=0
          total_findings=0

          # Process Semgrep results
          if [ -f reports/semgrep-report/semgrep.json ]; then
            echo "📝 Processing Semgrep JSON results..."
            total_critical_semgrep=$(jq '[.results[] | select(.extra.severity == "ERROR" or .extra.severity == "CRITICAL")] | length' reports/semgrep-report/semgrep.json 2>/dev/null || echo "0")
            total_high_semgrep=$(jq '[.results[] | select(.extra.severity == "WARNING" or .extra.severity == "HIGH")] | length' reports/semgrep-report/semgrep.json 2>/dev/null || echo "0")
            total_medium_semgrep=$(jq '[.results[] | select(.extra.severity == "MEDIUM")] | length' reports/semgrep-report/semgrep.json 2>/dev/null || echo "0")
            total_findings_semgrep=$(jq '.results | length' reports/semgrep-report/semgrep.json 2>/dev/null || echo "0")
          else
            echo "⚠️ No Semgrep JSON results found, using SARIF if available..."
            if [ -f reports/semgrep-report/semgrep.sarif ]; then
              total_critical_semgrep=$(jq '[.runs[].results[] | select(.level == "error")] | length' reports/semgrep-report/semgrep.sarif 2>/dev/null || echo "0")
              total_high_semgrep=$(jq '[.runs[].results[] | select(.level == "warning")] | length' reports/semgrep-report/semgrep.sarif 2>/dev/null || echo "0")
              total_medium_semgrep=$(jq '[.runs[].results[] | select(.level == "note")] | length' reports/semgrep-report/semgrep.sarif 2>/dev/null || echo "0")
              total_findings_semgrep=$(jq '[.runs[].results[]] | length' reports/semgrep-report/semgrep.sarif 2>/dev/null || echo "0")
            else
              total_critical_semgrep=0
              total_high_semgrep=0
              total_medium_semgrep=0
              total_findings_semgrep=0
            fi
          fi

          # Process Nuclei results
          if [ -f reports/nuclei-report/nuclei-findings.json ]; then
            echo "🌐 Processing Nuclei results..."
            total_critical_nuclei=$(jq '[.[] | select(.info.severity == "critical")] | length' reports/nuclei-report/nuclei-findings.json 2>/dev/null || echo "0")
            total_high_nuclei=$(jq '[.[] | select(.info.severity == "high")] | length' reports/nuclei-report/nuclei-findings.json 2>/dev/null || echo "0")
            total_medium_nuclei=$(jq '[.[] | select(.info.severity == "medium")] | length' reports/nuclei-report/nuclei-findings.json 2>/dev/null || echo "0")
            total_findings_nuclei=$(jq 'length' reports/nuclei-report/nuclei-findings.json 2>/dev/null || echo "0")
          else
            echo "⚠️ No Nuclei results found (DAST may have been skipped)"
            total_critical_nuclei=0
            total_high_nuclei=0
            total_medium_nuclei=0
            total_findings_nuclei=0
          fi

          # Calculate totals
          total_critical=$((total_critical_semgrep + total_critical_nuclei))
          total_high=$((total_high_semgrep + total_high_nuclei))
          total_medium=$((total_medium_semgrep + total_medium_nuclei))
          total_findings=$((total_findings_semgrep + total_findings_nuclei))

          # Risk assessment
          if [ "$total_critical" -gt 0 ]; then
            risk_level="CRITICAL"
            risk_symbol="🚨"
          elif [ "$total_high" -gt 5 ]; then
            risk_level="HIGH"
            risk_symbol="⚠️"
          elif [ "$total_high" -gt 0 ]; then
            risk_level="MEDIUM"
            risk_symbol="🟡"
          else
            risk_level="LOW"
            risk_symbol="✅"
          fi

          # Compliance scoring
          compliance_deductions=0
          compliance_deductions=$((compliance_deductions + total_critical * 10))
          compliance_deductions=$((compliance_deductions + total_high * 3))
          compliance_score=$((100 - compliance_deductions))
          [ $compliance_score -lt 0 ] && compliance_score=0

          echo "📊 Security Analysis Summary:"
          echo "   Semgrep: $total_findings_semgrep findings ($total_critical_semgrep critical, $total_high_semgrep high)"
          echo "   Nuclei: $total_findings_nuclei findings ($total_critical_nuclei critical, $total_high_nuclei high)"
          echo "   Total: $total_findings findings ($total_critical critical, $total_high high)"
          echo "   Risk Level: $risk_level"
          echo "   Compliance Score: $compliance_score%"

          # Generate report
          mkdir -p reports/final
          cat > reports/final/security-report.md << 'REPORT_EOF'
          # 🔒 Security Pipeline Report

          ## RISK_SYMBOL Risk Level: RISK_LEVEL
          - **Critical Issues:** TOTAL_CRITICAL
          - **High Issues:** TOTAL_HIGH
          - **Medium Issues:** TOTAL_MEDIUM  
          - **Total Findings:** TOTAL_FINDINGS
          - **Compliance Score:** COMPLIANCE_SCORE%

          ## 📊 Breakdown by Tool
          - **Semgrep (SAST):** SEMGREP_FINDINGS findings (SEMGREP_CRITICAL critical, SEMGREP_HIGH high)
          - **Nuclei (DAST):** NUCLEI_FINDINGS findings (NUCLEI_CRITICAL critical, NUCLEI_HIGH high)

          ## 🎯 Recommended Actions
          RECOMMENDED_ACTIONS

          ## 📋 Summary
          - Full Semgrep static analysis and Nuclei dynamic scan executed
          - SARIF results uploaded to GitHub Security tab for detailed review
          - All scan artifacts preserved for compliance and further analysis
          - Executive summary available for stakeholder communication

          **Report generated on:** REPORT_DATE
          REPORT_EOF

          # Replace placeholders
          sed -i "s/RISK_SYMBOL/$risk_symbol/g" reports/final/security-report.md
          sed -i "s/RISK_LEVEL/$risk_level/g" reports/final/security-report.md
          sed -i "s/TOTAL_CRITICAL/$total_critical/g" reports/final/security-report.md
          sed -i "s/TOTAL_HIGH/$total_high/g" reports/final/security-report.md
          sed -i "s/TOTAL_MEDIUM/$total_medium/g" reports/final/security-report.md
          sed -i "s/TOTAL_FINDINGS/$total_findings/g" reports/final/security-report.md
          sed -i "s/COMPLIANCE_SCORE/$compliance_score/g" reports/final/security-report.md
          sed -i "s/SEMGREP_FINDINGS/$total_findings_semgrep/g" reports/final/security-report.md
          sed -i "s/SEMGREP_CRITICAL/$total_critical_semgrep/g" reports/final/security-report.md
          sed -i "s/SEMGREP_HIGH/$total_high_semgrep/g" reports/final/security-report.md
          sed -i "s/NUCLEI_FINDINGS/$total_findings_nuclei/g" reports/final/security-report.md
          sed -i "s/NUCLEI_CRITICAL/$total_critical_nuclei/g" reports/final/security-report.md
          sed -i "s/NUCLEI_HIGH/$total_high_nuclei/g" reports/final/security-report.md
          sed -i "s/REPORT_DATE/$(date -u '+%Y-%m-%d %H:%M UTC')/g" reports/final/security-report.md

          # Generate recommendations
          if [ "$total_critical" -gt 0 ]; then
            recommendations="- **🚨 URGENT:** Address all $total_critical critical issues immediately
          - **Review Process:** Investigate how critical vulnerabilities reached this stage
          - **Impact Assessment:** Determine if production systems are affected"
          elif [ "$total_high" -gt 5 ]; then
            recommendations="- **⚠️ HIGH PRIORITY:** Address $total_high high-severity issues within 1 week
          - **Resource Allocation:** Assign dedicated security review resources
          - **Process Improvement:** Consider additional security controls"
          elif [ "$total_high" -gt 0 ]; then
            recommendations="- **📋 SCHEDULED:** Review and address $total_high high-severity issues within 2 weeks
          - **Monitoring:** Continue regular security scanning and monitoring"
          else
            recommendations="- **✅ MAINTENANCE:** No critical or high-severity issues detected
          - **Continue:** Maintain current security practices and regular scanning
          - **Optimization:** Consider expanding security coverage or reducing scan frequency"
          fi

          sed -i "s|RECOMMENDED_ACTIONS|$recommendations|g" reports/final/security-report.md

          echo "✅ Security report generated successfully"

      - name: Create Step Summary
        run: |
          if [ -f reports/final/security-report.md ]; then
            echo "## 🔒 Security Pipeline Results" >> $GITHUB_STEP_SUMMARY
            cat reports/final/security-report.md >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security report not generated" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Security Summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: reports/final/
          retention-days: 30
